# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
import importlib
from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")
import sys
import ctypes
ll = ctypes.cdll.LoadLibrary
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RSUtilityTool
else:
    import _RSUtilityTool

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RSUtilityTool.delete_SwigPyIterator

    def value(self):
        return _RSUtilityTool.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RSUtilityTool.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RSUtilityTool.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RSUtilityTool.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RSUtilityTool.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RSUtilityTool.SwigPyIterator_copy(self)

    def next(self):
        return _RSUtilityTool.SwigPyIterator_next(self)

    def __next__(self):
        return _RSUtilityTool.SwigPyIterator___next__(self)

    def previous(self):
        return _RSUtilityTool.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RSUtilityTool.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RSUtilityTool.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RSUtilityTool.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RSUtilityTool.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RSUtilityTool.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RSUtilityTool.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RSUtilityTool.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RSUtilityTool:
_RSUtilityTool.SwigPyIterator_swigregister(SwigPyIterator)


def InsertionSort(arr, size):
    return _RSUtilityTool.InsertionSort(arr, size)

def GetCFLBoundary(label, boundary, nWidth, nHeight):
    return _RSUtilityTool.GetCFLBoundary(label, boundary, nWidth, nHeight)

def GetLabelPreProPython(mask, nWidth, nHeight, obj_threshold=5, nonobj_threshold=5):
    return _RSUtilityTool.GetLabelPreProPython(mask, nWidth, nHeight, obj_threshold, nonobj_threshold)

def GetLabelPostProPython(mask, nWidth, nHeight, noisePointThreshold=50):
    return _RSUtilityTool.GetLabelPostProPython(mask, nWidth, nHeight, noisePointThreshold)

def GetLabelPostGLProPython(mask, nWidth, nHeight, noisePointThreshold=50):
    return _RSUtilityTool.GetLabelPostGLProPython(mask, nWidth, nHeight, noisePointThreshold)

def GetLabelBackGroundPython(mask, nWidth, nHeight, minCFLSize=100, smallBuffer=20, largeBuffer=150):
    return _RSUtilityTool.GetLabelBackGroundPython(mask, nWidth, nHeight, minCFLSize, smallBuffer, largeBuffer)

def GetCFLProcRegionPython(mask, label, nWidth, nHeight, minCFLSize=100, smallBuffer=20, largeBuffer=150):
    return _RSUtilityTool.GetCFLProcRegionPython(mask, label, nWidth, nHeight, minCFLSize, smallBuffer, largeBuffer)

def GetCFLProcRegionNewPython(mask, label, nWidth, nHeight, minCFLSize=100, smallBuffer=20, largeBuffer=150, thresBuffer=80):
    return _RSUtilityTool.GetCFLProcRegionNewPython(mask, label, nWidth, nHeight, minCFLSize, smallBuffer, largeBuffer, thresBuffer)

def GetCFLProcRegionMergePython(mask, label, nWidth, nHeight, minCFLSize=100, smallBuffer=20, largeBuffer=150):
    return _RSUtilityTool.GetCFLProcRegionMergePython(mask, label, nWidth, nHeight, minCFLSize, smallBuffer, largeBuffer)

def GetPassPath(pObjMap, img, mask, nWidth, nHeight):
    return _RSUtilityTool.GetPassPath(pObjMap, img, mask, nWidth, nHeight)

def GetCFLBoundaryPython(mask, pObjMap, nWidth, nHeight):
    return _RSUtilityTool.GetCFLBoundaryPython(mask, pObjMap, nWidth, nHeight)

def LatLon2PixelMain(img, mask, data, nWidth, nHeight, length):
    return _RSUtilityTool.LatLon2PixelMain(img, mask, data, nWidth, nHeight, length)

def LatLon2PixelMain_new(img, data, mask, nWidth, nHeight, length, dem_res, point_size, method=1, unnormal_value=-1):
    return _RSUtilityTool.LatLon2PixelMain_new(img, data, mask, nWidth, nHeight, length, dem_res, point_size, method, unnormal_value)

def Stat_bool_Main(mask, nWidth, nHeight):
    return _RSUtilityTool.Stat_bool_Main(mask, nWidth, nHeight)

def CLabelPython(mask, pObjMap, nWidth, nHeight, background, is8Neibor=True):
    return _RSUtilityTool.CLabelPython(mask, pObjMap, nWidth, nHeight, background, is8Neibor)

def CSegPython(mask, img, pObjMap, nWidth, nHeight, background, merge_threshold, bg_threshold, is8Neibor=True):
    return _RSUtilityTool.CSegPython(mask, img, pObjMap, nWidth, nHeight, background, merge_threshold, bg_threshold, is8Neibor)

def GetAveragePython(mask, data, img, pObjMap, nWidth, nHeight, background):
    return _RSUtilityTool.GetAveragePython(mask, data, img, pObjMap, nWidth, nHeight, background)

def UnnormalDection(mask, img, pObjMap, nWidth, nHeight, edge_threshold, merge_threshold, is8Neibor=True):
    return _RSUtilityTool.UnnormalDection(mask, img, pObjMap, nWidth, nHeight, edge_threshold, merge_threshold, is8Neibor)

def UnnormalDectionAux(mask, img, pObjMap, nWidth, nHeight, edge_threshold, merge_threshold, is8Neibor=True):
    return _RSUtilityTool.UnnormalDectionAux(mask, img, pObjMap, nWidth, nHeight, edge_threshold, merge_threshold, is8Neibor)

def GetRoughness_new(img, data, pObjMap, winScale, nWidth, nHeight):
    return _RSUtilityTool.GetRoughness_new(img, data, pObjMap, winScale, nWidth, nHeight)

def GetRoughness(img, data, win_size, nWidth, nHeight, min_data=-1, max_data=1, min_proc=-1, max_proc=1, noise_filter=True):
    return _RSUtilityTool.GetRoughness(img, data, win_size, nWidth, nHeight, min_data, max_data, min_proc, max_proc, noise_filter)

def GetCFLRegion_float(data, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint=False, is8Neibor=True):
    return _RSUtilityTool.GetCFLRegion_float(data, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint, is8Neibor)

def GetCFLRegion_double(data, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint=False, is8Neibor=True):
    return _RSUtilityTool.GetCFLRegion_double(data, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint, is8Neibor)

def GetCFLRegionPath_float(data, label, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint=False, is8Neibor=True):
    return _RSUtilityTool.GetCFLRegionPath_float(data, label, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint, is8Neibor)

def GetCFLRegionPath_double(data, label, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint=False, is8Neibor=True):
    return _RSUtilityTool.GetCFLRegionPath_double(data, label, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint, is8Neibor)

def GetCFLRegionWaitPath_float(data, label, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint=False, is8Neibor=True):
    return _RSUtilityTool.GetCFLRegionWaitPath_float(data, label, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint, is8Neibor)

def GetCFLRegionWaitPath_double(data, label, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint=False, is8Neibor=True):
    return _RSUtilityTool.GetCFLRegionWaitPath_double(data, label, mask, pObjMap, nWidth, nHeight, threshold, object_constraint, nonobject_constraint, is_used_constraint, is8Neibor)

def GetBackGround_float(data, pObjMap, nWidth, nHeight):
    return _RSUtilityTool.GetBackGround_float(data, pObjMap, nWidth, nHeight)

def GetBackGround_double(data, pObjMap, nWidth, nHeight):
    return _RSUtilityTool.GetBackGround_double(data, pObjMap, nWidth, nHeight)

def GetUncertainNumAndPro_float(data, mask, nWidth, nHeight, object_constraint, nonobject_constraint, is_used_constraint=False, postProThreshold=10, is8Neibor=True):
    return _RSUtilityTool.GetUncertainNumAndPro_float(data, mask, nWidth, nHeight, object_constraint, nonobject_constraint, is_used_constraint, postProThreshold, is8Neibor)

def GetUncertainNumAndPro_double(data, mask, nWidth, nHeight, object_constraint, nonobject_constraint, is_used_constraint=False, postProThreshold=10, is8Neibor=True):
    return _RSUtilityTool.GetUncertainNumAndPro_double(data, mask, nWidth, nHeight, object_constraint, nonobject_constraint, is_used_constraint, postProThreshold, is8Neibor)

def GetUncertainNumAndProPath_float(data, label, mask, nWidth, nHeight, object_constraint, nonobject_constraint, is_used_constraint=False, postProThreshold=10, is8Neibor=True):
    return _RSUtilityTool.GetUncertainNumAndProPath_float(data, label, mask, nWidth, nHeight, object_constraint, nonobject_constraint, is_used_constraint, postProThreshold, is8Neibor)

def GetUncertainNumAndProPath_double(data, label, mask, nWidth, nHeight, object_constraint, nonobject_constraint, is_used_constraint=False, postProThreshold=10, is8Neibor=True):
    return _RSUtilityTool.GetUncertainNumAndProPath_double(data, label, mask, nWidth, nHeight, object_constraint, nonobject_constraint, is_used_constraint, postProThreshold, is8Neibor)


